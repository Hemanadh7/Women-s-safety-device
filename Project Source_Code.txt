
#include <Adafruit_Fingerprint.h>
//#include <SoftwareSerial.h>
//#include "DHT.h"
#define mySerial Serial1
#include <LiquidCrystal.h>
LiquidCrystal lcd(A2,A3,A4,A5,A6,A7);

#define DHTPIN 7
#define DHTTYPE DHT11 
int getFingerprintIDez();
//SoftwareSerial mySerial(2, 3);// tx, rx
//SoftwareSerial gps(10,11); // RX, TX
 Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
char str[70];
String str1;
String gpsString="";
char *test="$GPGGA";
String latitude="No Range      ";
String longitude="No Range     ";
int temp=0,i;
boolean gps_status=0;
 int x1,x,gas;            
int y1,count,count1; 
int led=13;
int data=A0;
int bt,b;
unsigned long temp1=0;



int v1;
int v2;
int v3;
int v;
int p1=0,p2=1,p3,p4,p5,p6;
int j;

int f;

int FingerMode = 0 ;
int SkipHead = 0;
int State1=0;
int State2=0;
uint8_t id;

//DHT dht(DHTPIN, DHTTYPE);
void setup()  
{
  
   lcd.begin(16, 2);
//   dht.begin();
  Serial.begin(9600);
  Serial3.begin(9600);
  Serial2.begin(9600);
 // Serial1.begin(9600);
  Serial.println("fingertest");
 finger.begin(57600);
  

  
  pinMode(4,OUTPUT);//Pin connectet to relay
  pinMode(5,OUTPUT);
  pinMode(6,OUTPUT);
 pinMode(A0, INPUT);  
  pinMode(A15, INPUT);  
   pinMode(8, INPUT);  //yellow delete
  pinMode(9, INPUT);
  
  digitalWrite(4,LOW);
  digitalWrite(5,LOW);
  digitalWrite(6,LOW);


  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("women safety sys");
  lcd.setCursor(0, 1);
  lcd.print("using arduino");
  delay(1000);
  get_gps();
  delay(2000);

  lcd.clear();
  lcd.print("GPS Range Found");
  lcd.setCursor(0,1);
  lcd.print("GPS is Ready");
  delay(2000);
  digitalWrite(6,HIGH);
  delay(2000);
  gsm_init();

  lcd.clear();
  Serial.println("AT+CNMI=2,2,0,0,0");
 // Serial.println("AT+CNMI=1,2,0,0,0");
  lcd.print("GPS Initializing");
  lcd.setCursor(0,1);
  lcd.print("  No GPS Range  ");
 
  lcd.clear();
  lcd.print("System Ready");
  temp=0;
  }

  
  
  void loop()                     // run over and over again
{
   if (digitalRead(9) == HIGH ) {
    delay(10);
    if (digitalRead(9) == HIGH ) FingerMode = 2; SkipHead = 0; //delete
  }

  if (digitalRead(8) == HIGH ) {
    delay(10);
    if (digitalRead(8) == HIGH ) FingerMode = 1; SkipHead = 0; //finger
  }
  
 switch (FingerMode) {
    case 1:
      {
        if (SkipHead == 0)
        {
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Enrolling Mode");
        }
        lcd.setCursor(0, 1);
        id = 2;
        getFingerprintEnroll();
        delay(2000);       
       lcd.setCursor(0, 1);
        lcd.print("                ");
        lcd.setCursor(0, 1);
       /* id = 1;
        getFingerprintEnroll();*/
        delay(2000);
 
      }
      break;
    case 2:
      {
        if (SkipHead == 0)
        {
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("panic Mode");
          delay(1000);
        }

    /*  deleteFingerprint(0);
        delay(500);  */
      /*deleteFingerprint(1);
        delay(500);  */ 
        trigsms();
   }
      break;
   default:
      {
            valid(); 
            break;
      }
  
    
}

}




uint8_t getFingerprintID()
{
  uint8_t p = finger.getImage();
  switch (p)
  {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
        default:
      Serial.println("Unknown error");
      return p;
  }

  // OK success!

  p = finger.image2Tz();
  switch (p) 
  {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK)
  {
    Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Did not find a match");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }   
  
  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  Serial.print(" with confidence of "); Serial.println(finger.confidence); 
}




int getFingerprintIDez() {


  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK) {
       // Serial.println(p);
      /* Serial.println("not place finger");
        Serial.println("AT");
  delay(1000);
  Serial.println("AT+CMGF=1");
  delay(1000);
  Serial.println("AT+CMGS=\"+917306206204\"");   // use your 10 digit cell no. here
  delay(1000);
  Serial.print("Emergency need help i am at");
  Serial.println("https://www.google.co.in/maps/place/"+latitude+"N,"+longitude+"E");
  delay(1000);
    Serial.write(26);
    delay(1000);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("MSG  SENT");
       delay(1000);*/
    // not place finger
    trigsms();
  }

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  {
    Serial.println(p);
    return -1;
  }

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)
  {
   // if (p == 9) {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("the result is...");
      lcd.setCursor(0, 1);
      lcd.print("Not Found");
      delay(1000);
       Serial.println("the result is Not Found...");
      count1++;
      if(count1 == 10)
      {
        trigsms();
        }
     /* sensor();
         Serial.println("AT");
  delay(1000);
  Serial.println("AT+CMGF=1");
  delay(1000);
  Serial.println("AT+CMGS=\"+917306206204\"");   // use your 10 digit cell no. here
  delay(1000);
   Serial.print("Emergency patient status:");
   str1="BPM:"+ String(bt)+"Temperature: "+ String(f)+ " *F\t"+ "co2="+ String(gas);
   Serial.println(str1);
   Serial.println("ambulance at");
  Serial.println("https://www.google.co.in/maps/place/"+latitude+"N,"+longitude+"E");
     delay(1000);
    Serial.write(26);
    delay(1000);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("MSG 1 SENT");
       delay(1000);
         Serial.println("AT");
  delay(1000);
  Serial.println("AT+CMGF=1");
  delay(1000);
  Serial.println("AT+CMGS=\"+917306206204\"");   // use your 10 digit cell no. here
  delay(1000);
   Serial.print("Emergency patient status:");
   str1="BPM:"+ String(bt)+"Temperature: "+ String(f)+ " *F\t"+ "co2="+ String(gas);
   Serial.println(str1);
   Serial.println("ambulance at");
  Serial.println("https://www.google.co.in/maps/place/"+latitude+"N,"+longitude+"E");
     delay(1000);
    Serial.write(26);
    delay(1000);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("MSG 2 SENT");   
       delay(1000);**/
          
      return -1;

    } /*else {
      Serial.println(p); return -1;
    }
  }*/

  // found a match!
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("the result is..");
  lcd.setCursor(0, 1);
  lcd.print("Found ID #"); lcd.print(finger.fingerID);
 /* if (finger.fingerID==1){
     //digitalWrite(8,State1);
     //State1=!State1;  
  }
  if (finger.fingerID==2){
    // digitalWrite(9,State2);
    // State2=!State2; 
  } */ 
  
  delay(1500);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Place");
  lcd.setCursor(0, 1);
  lcd.print("your Finger..!");
  Serial.print(" with confidence of "); Serial.println(finger.confidence);
  return finger.fingerID;
}

uint8_t deleteFingerprint(uint8_t id) {
  uint8_t p = -1;

  p = finger.deleteModel(id);

  if (p == FINGERPRINT_OK) {
    lcd.setCursor(0, 1);
    lcd.print("             ");
    lcd.setCursor(0, 1);
    lcd.print("Deleted! #");
    lcd.print(id);
    Serial.println(); Serial.print("Deleted! #"); Serial.print(id); Serial.println();
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not delete in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.print("Unknown error: 0x"); Serial.println(p, HEX);
    return p;
  }
}

uint8_t getFingerprintEnroll() {

  int p = -1;
  Serial.print("Waiting for valid finger to enroll as #"); Serial.println(id);
  lcd.setCursor(0, 1);
  lcd.print("                ");
  lcd.setCursor(0, 1);
  lcd.print("Place finger #"); lcd.print(id);
  lcd.blink();
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image taken");
        break;
      case FINGERPRINT_NOFINGER:
        lcd.blink();
        Serial.println(".");
        break;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        break;
      case FINGERPRINT_IMAGEFAIL:
        Serial.println("Imaging error");
        break;
      default:
        Serial.println("Unknown error");
        break;
    }
  }

  // OK success!

  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:

      Serial.println("Image converted");
      lcd.setCursor(0, 1);
      lcd.print("               ");
      lcd.setCursor(0, 1);
      lcd.print("Image converted");
      delay(500);
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  Serial.println("Remove finger");
  lcd.setCursor(0, 1);
  lcd.print("                ");
  lcd.setCursor(0, 1);
  lcd.print("Remove finger");
  delay(2000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
  Serial.print("ID "); Serial.println(id);
  p = -1;
  Serial.println("Place same finger again");
  lcd.setCursor(0, 1);
  lcd.print("                ");
  lcd.setCursor(0, 1);
  lcd.print("Place same again!");

  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image taken");
        break;
      case FINGERPRINT_NOFINGER:
        Serial.print(".");
        break;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        break;
      case FINGERPRINT_IMAGEFAIL:
        Serial.println("Imaging error");
        break;
      default:
        Serial.println("Unknown error");
        break;
    }
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK converted!
  Serial.print("Creating model for #");  Serial.println(id);

  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
      lcd.print("Prints matched!");
  delay(1000);
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
    Serial.println("Fingerprints did not match");
       lcd.print("FP didn't match");
  delay(1000);
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  Serial.print("ID "); Serial.println(id);
  lcd.noBlink();
  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) {
    lcd.setCursor(0, 1);
    lcd.print("                ");
    lcd.setCursor(0, 1);
    lcd.print("Stored! #");
    lcd.print(id);
    Serial.println("Stored!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }
}
void valid()
{  
lcd.clear();
lcd.setCursor(0,0);
lcd.print("PLACE FINGER ");
lcd.setCursor(0,1);
lcd.print("ON THE SENSOR");     
delay(1000); 

  if (finger.verifyPassword())
  {
  if(getFingerprintIDez()>=0)
  {
   if ((finger.fingerID== 2)||(finger.fingerID== 3)||(finger.fingerID== 4)
   ||(finger.fingerID== 5)||(finger.fingerID== 6)||(finger.fingerID== 7)
   ||(finger.fingerID== 8)||(finger.fingerID== 9))
              {
              count1=0;                     
       lcd.clear();
lcd.setCursor(0,0);
lcd.print("your in safe");
delay(1000);    
               }
           
       
         
  }
  }

}
  
  
  /*void sensor()
  {
     lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Data Reading"); 
   delay(100);
    temp1=millis();
   
   while(millis()<(temp1+10000))
   {
      if(analogRead(data)<100)
        {
         count=count+1;
          
          while(analogRead(data)<100);

        }
        delay(100);
   }
        if(count>0)
      {
         
         count=count*6;
         bt=count;
        
          
         //Serial.print("\tBPM:  ");
         //Serial.println(bt);
          count=0;
          temp1=0;
       }
       
       if((bt>85)&&(bt<120))
       {
        bt=map(bt,85,120,65,80);
        }
         if((bt<65)&&(bt>1))
       {
        bt=0;
        }
         if((bt>125))
       {
        bt=map(bt,121,1023,90,110);
        }
        

        f = dht.readTemperature(true); 
        delay(1000);
        
          x = analogRead(A15);
          gas=map(x,0,1023,5,99); 
        
              lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("BPM:");
      lcd.setCursor(4,0);
      lcd.print(bt);
      lcd.setCursor(8,0);
      lcd.print("temp:");
      lcd.setCursor(13,0);
      lcd.print(f);
      lcd.setCursor(0,1);
      lcd.print("co2:");
      lcd.setCursor(4,1);
      lcd.print(gas);
       delay(2000);
    
    }
  */
  void trigsms()
  {
    init_sms();
    Serial.print("Emergency I am in trouble at");
     
   Serial.println("https://www.google.co.in/maps/place/"+latitude+"N,"+longitude+"E");
    Serial.println("Please take some action soon..\nThankyou");
    send_sms();
    delay(2000);
    lcd_status();
     delay(2000);
     init_sms1();
    Serial.print("Emergency I am in trouble at");
     
   Serial.println("https://www.google.co.in/maps/place/"+latitude+"N,"+longitude+"E");
    Serial.println("Please take some action soon..\nThankyou");
    send_sms();
    delay(2000);
    lcd_status();
     delay(2000);
    }
    
    
  void gpsEvent()
{
  gpsString="";
  while(1)
  {
   while (Serial2.available()>0)            //checking serial data from GPS
   {
    char inChar = (char)Serial2.read();
     gpsString+= inChar;                    //store data from GPS into gpsString
     i++;
     if (i < 7)                      
     {
      if(gpsString[i-1] != test[i-1])         //checking for $GPGGA sentence
      {
        i=0;
        gpsString="";
      }
     }
    if(inChar=='\r')
    {
     if(i>65)
     {
       gps_status=1;
       break;
     }
     else
     {
       i=0;
     }
    }
  }
   if(gps_status)
    break;
  }
}

void gsm_init()
{
  lcd.clear();
  lcd.print("Finding Module..");
  boolean at_flag=1;
  while(at_flag)
  {
    Serial.println("AT");
    while(Serial.available()>0)
    {
      if(Serial.find("OK"))
      at_flag=0;
    }
    
    delay(1000);
  }
  lcd.clear();
  lcd.print("Module Connected..");
  delay(1000);
  lcd.clear();
  lcd.print("Disabling ECHO");
  boolean echo_flag=1;
  while(echo_flag)
  {
    Serial.println("ATE0");
    while(Serial.available()>0)
    {
      if(Serial.find("OK"))
      echo_flag=0;
    }
    delay(1000);
  }
  lcd.clear();
  lcd.print("Echo OFF");
  delay(1000);
  lcd.clear();
  lcd.print("Finding Network..");
  boolean net_flag=1;
  while(net_flag)
  {
    Serial.println("AT+CPIN?");
    while(Serial.available()>0)
    {
      if(Serial.find("+CPIN: READY"))
      net_flag=0;
    }
    delay(1000);
  }
  lcd.clear();
  lcd.print("Network Found..");
  delay(1000);
  lcd.clear();
}
void get_gps()
{
   gps_status=0;
   int x=0;
   while(gps_status==0)
   {
    gpsEvent();
    int str_lenth=i;
    latitude="";
    longitude="";
    int comma=0;
    while(x<str_lenth)
    {
      if(gpsString[x]==',')
      comma++;
      if(comma==2)        //extract latitude from string
      latitude+=gpsString[x+1];     
      else if(comma==4)        //extract longitude from string
      longitude+=gpsString[x+1];
      x++;
    }
    int l1=latitude.length();
    latitude[l1-1]=' ';
    l1=longitude.length();
    longitude[l1-1]=' ';
    lcd.clear();
    lcd.print("Lat:");
    lcd.print(latitude);
    lcd.setCursor(0,1);
    lcd.print("Long:");
    lcd.print(longitude);
    i=0;x=0;
    str_lenth=0;
    delay(2000);
   }
}
void init_sms()
{
  Serial.println("AT+CMGF=1");
  delay(400);
//  Serial.println("AT+CMGS=\"+919676787679\"");   // use your 10 digit cell no. here
Serial.println("AT+CMGS=\"+917981208810\"");
  delay(400);
}
void init_sms1()
{
  Serial.println("AT+CMGF=1");
  delay(400);
//  Serial.println("AT+CMGS=\"+919676787679\"");   // use your 10 digit cell no. here
Serial.println("AT+CMGS=\"+917013660878\"");
  delay(400);
}
void send_data(String message)
{
  Serial.println(message);
  delay(200);
}
void send_sms()
{
  Serial.write(26);
}
void lcd_status()
{
  lcd.clear();
  lcd.print("Message Sent");
  delay(2000);
  lcd.clear();
  lcd.print("System Ready");
  return;
}
  
  


         

     
